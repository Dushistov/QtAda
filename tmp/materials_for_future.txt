Как можно будет симулировать нажатие на объект:
    QByteArray subString = "mousearea";
    QByteArray teststr = metaObj->className();
    bool containsSubstring = teststr.toLower().contains(subString.toLower());
    if (containsSubstring) {
        QQuickItem *mouseArea = qobject_cast<QQuickItem*>(obj);
        qreal width = mouseArea->width();
        qreal height = mouseArea->height();
        // Вычисление координат центра
        QPointF centerPos(width / 2, height / 2);
        QMouseEvent pressEvent(QEvent::MouseButtonPress, centerPos, Qt::LeftButton, Qt::LeftButton, Qt::NoModifier);
        QMouseEvent releaseEvent(QEvent::MouseButtonRelease, centerPos, Qt::LeftButton, Qt::LeftButton, Qt::NoModifier);
        QCoreApplication::sendEvent(mouseArea, &pressEvent);
        QCoreApplication::sendEvent(mouseArea, &releaseEvent);
    }




QtWidgets:
// Buttons
checkButton('path', isChecked);
buttonClick('path');
buttonPress('path');
buttonDblClick('path');
// ComboBox
selectItem('path', index);
selectItem('path', 'text');
selectItem('path', 'text', index);

changeValue('path', 'type'); (type =    QSpinBox:
                                        Up, DblUp, Down, DblDown
                                        QSlider:
                                        SingleStepAdd, SingleStepSub, PageStepAdd, PageStepSub, ToMinimum, ToMaximum)
setValue('path', int);
setValue('path', double);
setValue('path', 'value');

// Calendar
setValue('path', 'date');

// QTreeView
expandDelegate('path', [indexPath (int array)]);
collapseDelegate('path', [indexPath (int array)]);

// QUndoView
undoCommand('path', index);

// View
delegateClick('path', row, column);
delegateClick('path', [indexPath (int array)]);
delegateDblClick('path', row, column);
delegateDblClick('path', [indexPath (int array)]);
clearSelection('path');

let selectionData = [{row: 'ALL', column: 'ALL'}, {row: 'ALL', column: [int array]}, {row: int, column: [int array]}, ...];
setSelection('path', selectionData);

// Menu 
activateMenu('path');
activateMenuAction('path', index);
activateMenuAction('path', 'text');
activateMenuAction('path', 'text', index);
activateMenuAction('path', index, isChecked);
activateMenuAction('path', 'text', isChecked);
activateMenuAction('path', 'text', index, isChecked);

// TabBar
selectTabItem('path', index);
selectTabItem('path', 'text');
selectTabItem('path', 'text', index);

setText('path', 'text');
setText('path', [indexPath (int array)], 'text');
setText('path', row, column, 'text');

closeDialog('path');
closeWindow('path');
close('path');


mouseClick('path', 'mouse type', x, y);
mouseDblClick('path', 'mouse type', x, y);

keyEvent('path', 'text/key');

wheelEvent('path', dx, dy);


+QML:
mouseAreaClick('path');
mouseAreaDblClick('path');
mouseAreaPress('path');
buttonClick('path');
buttonPress('path');
buttonDblClick('path');
checkButton('path', isChecked);

setDelayProgress('path', double);

setValue('path', int);
setValue('path', double);
setValue('path', 'value');
// RANGE:
setValue('path', double, double);
changeValue('path', 'type'); (type = Up, DblUp, Down, DblDown)

//! В QuickSpinBox может быть такое, что значение в setValue - это не совсем то значение, а индекс

// QuickPathView + SwipeView
selectViewItem('path', index);